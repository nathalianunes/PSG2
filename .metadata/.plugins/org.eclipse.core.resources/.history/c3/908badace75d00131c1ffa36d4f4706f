package kinect;
//import processing.core.PApplet;
import SimpleOpenNI.*;
import processing.core.*;

public class User extends PApplet {

	public SimpleOpenNI context;
//	color[] userClr = new color[] { color(255, 0, 0), color(0, 255, 0),
//			color(0, 0, 255), color(255, 255, 0), color(255, 0, 255),
//			color(0, 255, 255) };
	public PVector com = new PVector();
	public PVector com2d = new PVector();

	public void setup() {
		size(640, 480);

		context = new SimpleOpenNI(this);
		if (context.isInit() == false) {
			println("Can't init SimpleOpenNI, maybe the camera is not connected!");
			exit();
			return;
		}

		// enable depthMap generation
		context.enableDepth();

		// enable skeleton generation for all joints
		context.enableUser();

		background(200, 0, 0);

		stroke(0, 0, 255);
		strokeWeight(3);
		smooth();
	}

	public void draw() {
		// update the cam
		context.update();

		// draw depthImageMap
		// image(context.depthImage(),0,0);
		image(context.userImage(), 0, 0);

		// draw the skeleton if it's available
		int[] userList = context.getUsers();
		for (int i = 0; i < userList.length; i++) {
			if (context.isTrackingSkeleton(userList[i])) {
				stroke(100);
				drawSkeleton(userList[i]);
			}

			// draw the center of mass
			if (context.getCoM(userList[i], com)) {
				context.convertRealWorldToProjective(com, com2d);
				stroke(100, 255, 0);
				strokeWeight(1);
				beginShape(LINES);
				vertex(com2d.x, com2d.y - 5);
				vertex(com2d.x, com2d.y + 5);

				vertex(com2d.x - 5, com2d.y);
				vertex(com2d.x + 5, com2d.y);
				endShape();

				fill(0, 255, 100);
				text(Integer.toString(userList[i]), com2d.x, com2d.y);
			}
		}
	}

	// draw the skeleton with the selected joints
	public void drawSkeleton(int userId) {
		// to get the 3d joint data
		/*
		 * PVector jointPos = new PVector();
		 * context.getJointPositionSkeleton(userId
		 * ,SimpleOpenNI.SKEL_NECK,jointPos); println(jointPos);
		 */

		float size = 10;

		fill(0, 255, 0);

		// Occiptal
		PVector jointPos_occiptal = new PVector();
		context.getJointPositionSkeleton(userId, SimpleOpenNI.SKEL_HEAD,
				jointPos_occiptal);

		PVector jointPos_Proj_occiptal = new PVector();
		context.convertRealWorldToProjective(jointPos_occiptal,
				jointPos_Proj_occiptal);

		ellipse(jointPos_Proj_occiptal.x, jointPos_Proj_occiptal.y, size, size);
		
		// Pavilh‹o Auricular
		PVector jointPos_pavDir = new PVector();
		context.getJointPositionSkeleton(userId, SimpleOpenNI.SKEL_HEAD,
				jointPos_pavDir);

		PVector jointPos_Proj_pavDir = new PVector();
		context.convertRealWorldToProjective(jointPos_pavDir,
				jointPos_Proj_pavDir);

		ellipse(jointPos_Proj_pavDir.x + 50, jointPos_Proj_pavDir.y, size, size);

		PVector jointPos_pavEsq = new PVector();
		context.getJointPositionSkeleton(userId, SimpleOpenNI.SKEL_HEAD,
				jointPos_pavEsq);

		PVector jointPos_Proj_pavEsq = new PVector();
		context.convertRealWorldToProjective(jointPos_pavEsq,
				jointPos_Proj_pavEsq);

		ellipse(jointPos_Proj_pavEsq.x - 50, jointPos_Proj_pavEsq.y, size, size);

		
		// Ombro
		PVector jointPos_ombroDir = new PVector();
		context.getJointPositionSkeleton(userId,
				SimpleOpenNI.SKEL_RIGHT_SHOULDER, jointPos_ombroDir);

		PVector jointPos_Proj_ombroDir = new PVector();
		context.convertRealWorldToProjective(jointPos_ombroDir,
				jointPos_Proj_ombroDir);

		ellipse(jointPos_Proj_ombroDir.x, jointPos_Proj_ombroDir.y, size, size);

		PVector jointPos_ombroEsq = new PVector();
		context.getJointPositionSkeleton(userId, SimpleOpenNI.SKEL_LEFT_SHOULDER,
				jointPos_ombroEsq);

		PVector jointPos_Proj_ombroEsq = new PVector();
		context.convertRealWorldToProjective(jointPos_ombroEsq,
				jointPos_Proj_ombroEsq);

		ellipse(jointPos_Proj_ombroEsq.x, jointPos_Proj_ombroEsq.y, size, size);

		fill(255, 255, 255);
		
		// Escapular
		PVector jointPos_escDir = new PVector();
		context.getJointPositionSkeleton(userId,
				SimpleOpenNI.SKEL_RIGHT_SHOULDER, jointPos_escDir);

		PVector jointPos_Proj_escDir = new PVector();
		context.convertRealWorldToProjective(jointPos_escDir,
				jointPos_Proj_escDir);

		ellipse(jointPos_Proj_escDir.x + 30, jointPos_Proj_escDir.y - 30, size,
				size);

		PVector jointPos_escEsq = new PVector();
		context.getJointPositionSkeleton(userId, SimpleOpenNI.SKEL_LEFT_SHOULDER,
				jointPos_escEsq);

		PVector jointPos_Proj_escEsq = new PVector();
		context.convertRealWorldToProjective(jointPos_ombroEsq,
				jointPos_Proj_escEsq);

		ellipse(jointPos_Proj_escEsq.x-30, jointPos_Proj_escEsq.y-30, size, size);

		// Cotovelo
		PVector jointPos_cotoveloDir = new PVector();
		context.getJointPositionSkeleton(userId,
				SimpleOpenNI.SKEL_RIGHT_ELBOW, jointPos_cotoveloDir);

		PVector jointPos_Proj_cotoveloDir = new PVector();
		context.convertRealWorldToProjective(jointPos_cotoveloDir,
				jointPos_Proj_cotoveloDir);

		ellipse(jointPos_Proj_cotoveloDir.x + 20, jointPos_Proj_cotoveloDir.y + 20, size,
				size);
		
		PVector jointPos_cotoveloEsq = new PVector();
		context.getJointPositionSkeleton(userId,
				SimpleOpenNI.SKEL_LEFT_ELBOW, jointPos_cotoveloEsq);

		PVector jointPos_Proj_cotoveloEsq = new PVector();
		context.convertRealWorldToProjective(jointPos_cotoveloEsq,
				jointPos_Proj_cotoveloEsq);

		ellipse(jointPos_Proj_cotoveloEsq.x + 20, jointPos_Proj_cotoveloEsq.y + 20, size,
				size);
		

//		context.drawLimb(userId, SimpleOpenNI.SKEL_NECK,
//				SimpleOpenNI.SKEL_LEFT_SHOULDER);
//		context.drawLimb(userId, SimpleOpenNI.SKEL_LEFT_SHOULDER,
//				SimpleOpenNI.SKEL_LEFT_ELBOW);
//		context.drawLimb(userId, SimpleOpenNI.SKEL_LEFT_ELBOW,
//				SimpleOpenNI.SKEL_LEFT_HAND);
//
//		context.drawLimb(userId, SimpleOpenNI.SKEL_NECK,
//				SimpleOpenNI.SKEL_RIGHT_SHOULDER);
//		context.drawLimb(userId, SimpleOpenNI.SKEL_RIGHT_SHOULDER,
//				SimpleOpenNI.SKEL_RIGHT_ELBOW);
//		context.drawLimb(userId, SimpleOpenNI.SKEL_RIGHT_ELBOW,
//				SimpleOpenNI.SKEL_RIGHT_HAND);
//
//		context.drawLimb(userId, SimpleOpenNI.SKEL_LEFT_SHOULDER,
//				SimpleOpenNI.SKEL_TORSO);
//		context.drawLimb(userId, SimpleOpenNI.SKEL_RIGHT_SHOULDER,
//				SimpleOpenNI.SKEL_TORSO);
//
//		context.drawLimb(userId, SimpleOpenNI.SKEL_TORSO,
//				SimpleOpenNI.SKEL_LEFT_HIP);
//		context.drawLimb(userId, SimpleOpenNI.SKEL_LEFT_HIP,
//				SimpleOpenNI.SKEL_LEFT_KNEE);
//		context.drawLimb(userId, SimpleOpenNI.SKEL_LEFT_KNEE,
//				SimpleOpenNI.SKEL_LEFT_FOOT);
//
//		context.drawLimb(userId, SimpleOpenNI.SKEL_TORSO,
//				SimpleOpenNI.SKEL_RIGHT_HIP);
//		context.drawLimb(userId, SimpleOpenNI.SKEL_RIGHT_HIP,
//				SimpleOpenNI.SKEL_RIGHT_KNEE);
//		context.drawLimb(userId, SimpleOpenNI.SKEL_RIGHT_KNEE,
//				SimpleOpenNI.SKEL_RIGHT_FOOT);
	}

	// -----------------------------------------------------------------
	// SimpleOpenNI events

	public void onNewUser(SimpleOpenNI curContext, int userId) {
		println("onNewUser - userId: " + userId);
		println("\tstart tracking skeleton");

		curContext.startTrackingSkeleton(userId);
	}

	void onLostUser(SimpleOpenNI curContext, int userId) {
		println("onLostUser - userId: " + userId);
	}

	void onVisibleUser(SimpleOpenNI curContext, int userId) {
		// println("onVisibleUser - userId: " + userId);
	}

	public void keyPressed() {
		switch (key) {
		case ' ':
			context.setMirror(!context.mirror());
			break;
		}
	}
}
